test_run = require('test_run').new()
---
...
vshard = require('vshard')
---
...
lcfg = require('vshard.cfg')
---
...
util = require('util')
---
...
--
-- Check sharding config sanity.
--
function check(cfg) return util.check_error(lcfg.check, cfg) end
---
...
-- Not table.
check(100)
---
- Ð¡onfig must be map of options
...
-- Sharding is not a table.
check({sharding = 100})
---
- Sharding must be table
...
-- Replicaset is not table.
check({sharding = {100}})
---
- Replicaset must be a table
...
replica = {uri = 'uri:uri@uri'}
---
...
replicaset = {replicas = {['replica_uuid'] = replica}}
---
...
cfg = {sharding = {['replicaset_uuid'] = replicaset}}
---
...
-- Name is not string.
replica.name = 100
---
...
check(cfg)
---
- Name must be string
...
replica.name = 'storage'
---
...
-- Master is not boolean.
replica.master = 100
---
...
check(cfg)
---
- Master must be boolean
...
replica.master = true
---
...
-- Multiple masters.
replica2 = {uri = 'uri:uri@uri2', name = 'storage2', master = true}
---
...
replicaset.replicas['id2'] = replica2
---
...
check(cfg)
---
- Only one master is allowed per replicaset
...
replicaset.replicas['id2'] = nil
---
...
-- URI duplicate in one replicaset.
replica2 = {uri = 'uri:uri@uri', name = 'storage2'}
---
...
replicaset.replicas['id2'] = replica2
---
...
check(cfg)
---
- Duplicate uri uri:uri@uri
...
replicaset.replicas['id2'] = nil
---
...
-- URI duplicate in different replicasets.
replicaset2 = {replicas = {['id2'] = {uri = 'uri:uri@uri', name = 'storage2', master = true}}}
---
...
cfg.sharding['rsid2'] = replicaset2
---
...
check(cfg)
---
- Duplicate uri uri:uri@uri
...
cfg.sharding['rsid2'] = nil
---
...
-- UUID duplicate in different replicasets.
replicaset2 = {replicas = {['id3'] = {uri = 'uri:uri@uri2', name = 'storage2', master = true}}}
---
...
cfg.sharding['rsid2'] = replicaset2
---
...
replicaset3 = {replicas = {['id3'] = {uri = 'uri:uri@uri3', name = 'storage3', master = false}}}
---
...
cfg.sharding['rsid3'] = replicaset3
---
...
check(cfg)
---
- Duplicate uuid id3
...
cfg.sharding['rsid3'] = nil
---
...
cfg.sharding['rsid2'] = nil
---
...
--
-- gh-101: Log warning in case replica.name duplicate found.
--
-- name duplicate in one replicaset.
replica2_1 = {uri = 'uri:uri@uri2_1', name = 'dup_name1', master = true}
---
...
replica2_2 = {uri = 'uri:uri@uri2_2', name = 'dup_name1', master = false}
---
...
replicaset2 = {replicas = {['id2'] = replica2_1, ['id3'] = replica2_2}}
---
...
cfg.sharding['rsid2'] = replicaset2
---
...
_ = check(cfg)
---
...
test_run:grep_log('default', 'Duplicate replica.name is found: dup_name1')
---
- 'Duplicate replica.name is found: dup_name1'
...
cfg.sharding['rsid2'] = nil
---
...
-- name duplicate in different replicasets.
replica2 = {uri = 'uri:uri@uri2', name = 'dup_name2', master = true}
---
...
replica3 = {uri = 'uri:uri@uri3', name = 'dup_name2', master = true}
---
...
replicaset2 = {replicas = {['id2'] = replica2}}
---
...
replicaset3 = {replicas = {['id3'] = replica3}}
---
...
cfg.sharding['rsid2'] = replicaset2
---
...
cfg.sharding['rsid3'] = replicaset3
---
...
_ = check(cfg)
---
...
test_run:grep_log('default', 'Duplicate replica.name is found: dup_name2')
---
- 'Duplicate replica.name is found: dup_name2'
...
cfg.sharding['rsid2'] = nil
---
...
cfg.sharding['rsid3'] = nil
---
...
--
-- gh-40, gh-155: replicaset weight. Weight is used by a
-- rebalancer to correctly spead buckets on a cluster.
--
replicaset.weight = '100'
---
...
check(cfg)
---
- Weight must be non-negative number
...
replicaset.weight = -100
---
...
check(cfg)
---
- Weight must be non-negative number
...
replicaset.weight = 0
---
...
check(cfg)
---
- At least one replicaset weight should be > 0
...
replicaset.weight = 0.123
---
...
_ = lcfg.check(cfg)
---
...
replicaset.weight = 100000
---
...
_ = lcfg.check(cfg)
---
...
--
-- gh-12: zones, zone weight and failover by weight.
--
cfg.weights = 100
---
...
check(cfg)
---
- Weight matrix must be table
...
cfg.weights = {[{1}] = 200}
---
...
check(cfg)
---
- Zone identifier must be either string or number
...
weights = {zone1 = 100}
---
...
cfg.weights = weights
---
...
check(cfg)
---
- Zone must be map of relative weights of other zones
...
weights.zone1 = {[{1}] = 100}
---
...
check(cfg)
---
- Zone identifier must be either string or number
...
weights.zone1 = {zone2 = '100'}
---
...
check(cfg)
---
- Zone weight must be either nil or non-negative number
...
weights.zone1 = {zone1 = 100}
---
...
check(cfg)
---
- Weight of own zone must be either nil or 0
...
weights[2] = {zone1 = 100}
---
...
weights.zone1 = {[2] = 100}
---
...
_ = lcfg.check(cfg)
---
...
--
-- gh-62: allow to specify bucket_count, rebalancer settings.
--
cfg.bucket_count = -100
---
...
check(cfg)
---
- Bucket count must be positive integer
...
cfg.bucket_count = '0'
---
...
check(cfg)
---
- Bucket count must be positive integer
...
cfg.bucket_count = 100.5
---
...
check(cfg)
---
- Bucket count must be positive integer
...
cfg.bucket_count = 0
---
...
check(cfg)
---
- Bucket count must be positive integer
...
cfg.bucket_count = 100
---
...
_ = lcfg.check(cfg)
---
...
cfg.rebalancer_disbalance_threshold = -100
---
...
check(cfg)
---
- Rebalancer disbalance threshold must be non-negative number
...
cfg.rebalancer_disbalance_threshold = '100'
---
...
check(cfg)
---
- Rebalancer disbalance threshold must be non-negative number
...
cfg.rebalancer_disbalance_threshold = 0.5
---
...
_ = lcfg.check(cfg)
---
...
cfg.rebalancer_max_receiving = -100
---
...
check(cfg)
---
- Rebalancer max receiving bucket count must be positive integer
...
cfg.rebalancer_max_receiving = '100'
---
...
check(cfg)
---
- Rebalancer max receiving bucket count must be positive integer
...
cfg.rebalancer_max_receiving = 0.5
---
...
check(cfg)
---
- Rebalancer max receiving bucket count must be positive integer
...
cfg.rebalancer_max_receiving = 0
---
...
check(cfg)
---
- Rebalancer max receiving bucket count must be positive integer
...
cfg.rebalancer_max_receiving = 10
---
...
_ = lcfg.check(cfg)
---
...
--
-- gh-74: allow to specify name or id of an index on bucket
-- identifiers.
--
cfg.shard_index = -100
---
...
check(cfg)
---
- 'Shard index must be one of the following types: non-empty string, non-negative
  integer'
...
cfg.shard_index = 0.1
---
...
check(cfg)
---
- 'Shard index must be one of the following types: non-empty string, non-negative
  integer'
...
cfg.shard_index = 0
---
...
_ = lcfg.check(cfg)
---
...
cfg.shard_index = ''
---
...
check(cfg)
---
- 'Shard index must be one of the following types: non-empty string, non-negative
  integer'
...
cfg.shard_index = 'vbucket'
---
...
_ = lcfg.check(cfg)
---
...
--
-- gh-84: sync before master demotion, and allow to configure
-- sync timeout.
--
cfg.sync_timeout = -100
---
...
check(cfg)
---
- Sync timeout must be non-negative number
...
cfg.sync_timeout = 0
---
...
_ = lcfg.check(cfg)
---
...
cfg.sync_timeout = 10.5
---
...
_ = lcfg.check(cfg)
---
...
-- gh-91: Name is optional.
replica.name = nil
---
...
_ = lcfg.check(cfg)
---
...
replica.name = 'storage'
---
...
-- gh-47: Check uri
old_uri = replica.url
---
...
replica.uri = 'invalid uri'
---
...
util.check_error(lcfg.check, cfg)
---
- Invalid URI
...
replica.uri = '127.0.0.1'
---
...
lcfg.check(cfg)['sharding']
---
- replicaset_uuid:
    weight: 100000
    replicas:
      replica_uuid:
        uri: 127.0.0.1
        name: storage
        master: true
...
replica.uri = 'user:password@localhost'
---
...
lcfg.check(cfg)['sharding']
---
- replicaset_uuid:
    weight: 100000
    replicas:
      replica_uuid:
        uri: user:password@localhost
        name: storage
        master: true
...
replica.url = old_uri
---
...
-- gh-114: Check non-dynamic option change during reconfigure.
cfg_with_non_default = table.copy(cfg)
---
...
cfg.shard_index = nil
---
...
cfg_with_non_default.shard_index = 'non_default_name'
---
...
util.check_error(lcfg.check, cfg, cfg_with_non_default)
---
- Non-dynamic option shard_index cannot be reconfigured
...
-- gh-170: forbid infinite replicaset weight.
replica = {uri = 'uri:uri@uri', name = 'name'}
---
...
replicaset = {replicas = {['id'] = replica}, weight = math.huge}
---
...
cfg.sharding = {rsid = replicaset}
---
...
util.check_error(lcfg.check, cfg)
---
- Replicaset weight can not be Inf
...
cfg.sharding = nil
---
...
--
-- gh-161: parallel rebalancer and its option - max sending.
--
cfg.sharding = {}
---
...
cfg.rebalancer_max_sending = 'ten'
---
...
util.check_error(lcfg.check, cfg)
---
- Rebalancer max sending bucket count must be positive integer
...
cfg.rebalancer_max_sending = 100
---
...
util.check_error(lcfg.check, cfg)
---
- Rebalancer max sending bucket count must not be greater than 15
...
cfg.rebalancer_max_sending = 0
---
...
util.check_error(lcfg.check, cfg)
---
- Rebalancer max sending bucket count must be positive integer
...
cfg.rebalancer_max_sending = 15
---
...
lcfg.check(cfg).rebalancer_max_sending
---
- 15
...
cfg.rebalancer_max_sending = nil
---
...
--
-- Deprecated options do not break anything.
--
cfg.collect_bucket_garbage_interval = 100
---
...
cfg.collect_lua_garbage = 100
---
...
_ = lcfg.check(cfg)
---
...
--
-- gh-147: router map-reduce. It adds scheduler options on the storage.
--
cfg.sched_ref_quota = 100
---
...
_ = lcfg.check(cfg)
---
...
cfg.sched_ref_quota = 1
---
...
_ = lcfg.check(cfg)
---
...
cfg.sched_ref_quota = 0
---
...
_ = lcfg.check(cfg)
---
...
cfg.sched_ref_quota = -1
---
...
util.check_error(lcfg.check, cfg)
---
- Scheduler storage ref quota must be non-negative number
...
cfg.sched_ref_quota = nil
---
...
cfg.sched_move_quota = 100
---
...
_ = lcfg.check(cfg)
---
...
cfg.sched_move_quota = 1
---
...
_ = lcfg.check(cfg)
---
...
cfg.sched_move_quota = 0
---
...
_ = lcfg.check(cfg)
---
...
cfg.sched_move_quota = -1
---
...
util.check_error(lcfg.check, cfg)
---
- Scheduler bucket move quota must be non-negative number
...
cfg.sched_move_quota = nil
---
...
--
-- gh-75: auto master discovery.
--
replicaset = {replicas = {uuid = replica}}
---
...
replicaset.master = 'auto'
---
...
cfg.sharding = {rsid = replicaset}
---
...
_ = lcfg.check(cfg)
---
...
replicaset.master = 'non-auto'
---
...
util.check_error(lcfg.check, cfg)
---
- Only "auto" master is supported
...
replicaset.master = 123
---
...
util.check_error(lcfg.check, cfg)
---
- Master search mode must be string
...
replica.master = true
---
...
replicaset.master = 'auto'
---
...
util.check_error(lcfg.check, cfg)
---
- Can not specify master nodes when master search is enabled, but found master flag
  in replica uuid uuid
...
replica.master = false
---
...
util.check_error(lcfg.check, cfg)
---
- Can not specify master nodes when master search is enabled, but found master flag
  in replica uuid uuid
...
