test_run = require('test_run').new()
---
...
vshard = require('vshard')
---
...
fiber = require('fiber')
---
...
calc_metrics = vshard.storage.internal.rebalancer_calculate_metrics
---
...
build_routes = vshard.storage.internal.rebalancer_build_routes
---
...
calc_etalon = require('vshard.replicaset').calculate_etalon_balance
---
...
dispenser = vshard.storage.internal.route_dispenser
---
...
rlist = vshard.storage.internal.rlist
---
...
consts = vshard.consts
---
...
--
-- Test adding two new replicasets.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 100, weight = 50},
	uuid2 = {bucket_count = 0, weight = 20},
	uuid3 = {bucket_count = 0, weight = 30},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 100)
---
...
replicasets
---
- uuid1:
    weight: 50
    bucket_count: 100
    etalon_bucket_count: 50
  uuid3:
    weight: 30
    bucket_count: 0
    etalon_bucket_count: 30
  uuid2:
    weight: 20
    bucket_count: 0
    etalon_bucket_count: 20
...
calc_metrics(replicasets)
---
- 100
- uuid1
...
replicasets
---
- uuid1:
    needed: -50
    weight: 50
    bucket_count: 100
    etalon_bucket_count: 50
  uuid3:
    needed: 30
    weight: 30
    bucket_count: 0
    etalon_bucket_count: 30
  uuid2:
    needed: 20
    weight: 20
    bucket_count: 0
    etalon_bucket_count: 20
...
build_routes(replicasets)
---
- uuid1:
    uuid2: 20
    uuid3: 30
...
--
-- Test removing replicasets.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 2, weight = 1},
	uuid2 = {bucket_count = 2, weight = 1},
	uuid3 = {bucket_count = 3, weight = 0},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 7)
---
...
replicasets
---
- uuid1:
    weight: 1
    bucket_count: 2
    etalon_bucket_count: 3
  uuid3:
    weight: 0
    bucket_count: 3
    etalon_bucket_count: 0
  uuid2:
    weight: 1
    bucket_count: 2
    etalon_bucket_count: 4
...
calc_metrics(replicasets)
---
- inf
- uuid3
...
replicasets
---
- uuid1:
    needed: 1
    weight: 1
    bucket_count: 2
    etalon_bucket_count: 3
  uuid3:
    needed: -3
    weight: 0
    bucket_count: 3
    etalon_bucket_count: 0
  uuid2:
    needed: 2
    weight: 1
    bucket_count: 2
    etalon_bucket_count: 4
...
build_routes(replicasets)
---
- uuid3:
    uuid2: 2
    uuid1: 1
...
--
-- Test big weights.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 100, weight = 1000},
	uuid2 = {bucket_count = 100, weight = 2000},
	uuid3 = {bucket_count = 100, weight = 500},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 300)
---
...
replicasets
---
- uuid1:
    weight: 1000
    bucket_count: 100
    etalon_bucket_count: 85
  uuid3:
    weight: 500
    bucket_count: 100
    etalon_bucket_count: 43
  uuid2:
    weight: 2000
    bucket_count: 100
    etalon_bucket_count: 172
...
calc_metrics(replicasets)
---
- 132.55813953488
- uuid3
...
replicasets
---
- uuid1:
    needed: -15
    weight: 1000
    bucket_count: 100
    etalon_bucket_count: 85
  uuid3:
    needed: -57
    weight: 500
    bucket_count: 100
    etalon_bucket_count: 43
  uuid2:
    needed: 72
    weight: 2000
    bucket_count: 100
    etalon_bucket_count: 172
...
build_routes(replicasets)
---
- uuid1:
    uuid2: 15
  uuid3:
    uuid2: 57
...
--
-- Test no changes on already balanced cluster.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 100, weight = 1},
	uuid2 = {bucket_count = 100, weight = 1},
	uuid3 = {bucket_count = 100, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 300)
---
...
replicasets
---
- uuid1:
    weight: 1
    bucket_count: 100
    etalon_bucket_count: 100
  uuid3:
    weight: 1
    bucket_count: 100
    etalon_bucket_count: 100
  uuid2:
    weight: 1
    bucket_count: 100
    etalon_bucket_count: 100
...
calc_metrics(replicasets)
---
- 0
- null
...
replicasets
---
- uuid1:
    needed: 0
    weight: 1
    bucket_count: 100
    etalon_bucket_count: 100
  uuid3:
    needed: 0
    weight: 1
    bucket_count: 100
    etalon_bucket_count: 100
  uuid2:
    needed: 0
    weight: 1
    bucket_count: 100
    etalon_bucket_count: 100
...
build_routes(replicasets)
---
- []
...
--
-- Test rebalancer local state.
--
vshard.storage.internal.is_master = true
---
...
get_state = vshard.storage._rebalancer_request_state
---
...
_bucket = box.schema.create_space('_bucket')
---
...
pk = _bucket:create_index('pk')
---
...
status = _bucket:create_index('status', {parts = {{2, 'string'}}, unique = false})
---
...
_bucket:replace{1, consts.BUCKET.ACTIVE}
---
- [1, 'active']
...
_bucket:replace{2, consts.BUCKET.ACTIVE}
---
- [2, 'active']
...
_bucket:replace{3, consts.BUCKET.SENT}
---
- [3, 'sent']
...
get_state()
---
- bucket_active_count: 2
  bucket_pinned_count: 0
...
_bucket:replace{1, consts.BUCKET.RECEIVING}
---
- [1, 'receiving']
...
get_state()
---
...
vshard.storage.internal.is_master = false
---
...
assert(not vshard.storage.internal.this_replicaset)
---
- true
...
vshard.storage.internal.this_replicaset = {                                     \
    master = {                                                                  \
        uuid = 'master_uuid'                                                    \
    }                                                                           \
}
---
...
assert(not vshard.storage.internal.this_replica)
---
- true
...
vshard.storage.internal.this_replica = {uuid = 'replica_uuid'}
---
...
_, err = get_state()
---
...
assert(err.code == vshard.error.code.NON_MASTER)
---
- true
...
vshard.storage.internal.this_replicaset = nil
---
...
vshard.storage.internal.this_replica = nil
---
...
--
-- Other tests.
--
consts.BUCKET_COUNT = 100
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 50, weight = 1},
	uuid2 = {bucket_count = 50, weight = 1},
	uuid3 = {bucket_count = 0, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 100)
---
...
replicasets
---
- uuid1:
    weight: 1
    bucket_count: 50
    etalon_bucket_count: 33
  uuid3:
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 33
  uuid2:
    weight: 1
    bucket_count: 50
    etalon_bucket_count: 34
...
calc_metrics(replicasets)
---
- 100
- uuid3
...
replicasets
---
- uuid1:
    needed: -17
    weight: 1
    bucket_count: 50
    etalon_bucket_count: 33
  uuid3:
    needed: 33
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 33
  uuid2:
    needed: -16
    weight: 1
    bucket_count: 50
    etalon_bucket_count: 34
...
consts.BUCKET_COUNT = 100
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 34, weight = 1},
	uuid2 = {bucket_count = 34, weight = 1},
	uuid3 = {bucket_count = 32, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 100)
---
...
replicasets
---
- uuid1:
    weight: 1
    bucket_count: 34
    etalon_bucket_count: 33
  uuid3:
    weight: 1
    bucket_count: 32
    etalon_bucket_count: 33
  uuid2:
    weight: 1
    bucket_count: 34
    etalon_bucket_count: 34
...
calc_metrics(replicasets)
---
- 3.030303030303
- uuid1
...
replicasets
---
- uuid1:
    needed: -1
    weight: 1
    bucket_count: 34
    etalon_bucket_count: 33
  uuid3:
    needed: 1
    weight: 1
    bucket_count: 32
    etalon_bucket_count: 33
  uuid2:
    needed: 0
    weight: 1
    bucket_count: 34
    etalon_bucket_count: 34
...
consts.BUCKET_COUNT = 100
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 13, weight = 1},
	uuid2 = {bucket_count = 13, weight = 1},
	uuid3 = {bucket_count = 13, weight = 1},
	uuid4 = {bucket_count = 13, weight = 1},
	uuid5 = {bucket_count = 13, weight = 1},
	uuid6 = {bucket_count = 12, weight = 1},
	uuid7 = {bucket_count = 12, weight = 1},
	uuid8 = {bucket_count = 11, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 100)
---
...
replicasets
---
- uuid6:
    weight: 1
    bucket_count: 12
    etalon_bucket_count: 12
  uuid3:
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 12
  uuid7:
    weight: 1
    bucket_count: 12
    etalon_bucket_count: 12
  uuid8:
    weight: 1
    bucket_count: 11
    etalon_bucket_count: 12
  uuid4:
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 13
  uuid1:
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 13
  uuid5:
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 13
  uuid2:
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 13
...
calc_metrics(replicasets)
---
- 8.3333333333333
- uuid3
...
replicasets
---
- uuid6:
    needed: 0
    weight: 1
    bucket_count: 12
    etalon_bucket_count: 12
  uuid3:
    needed: -1
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 12
  uuid7:
    needed: 0
    weight: 1
    bucket_count: 12
    etalon_bucket_count: 12
  uuid8:
    needed: 1
    weight: 1
    bucket_count: 11
    etalon_bucket_count: 12
  uuid4:
    needed: 0
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 13
  uuid1:
    needed: 0
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 13
  uuid5:
    needed: 0
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 13
  uuid2:
    needed: 0
    weight: 1
    bucket_count: 13
    etalon_bucket_count: 13
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 25, weight = 1},
	uuid2 = {bucket_count = 25, weight = 1},
	uuid3 = {bucket_count = 25, weight = 1},
	uuid4 = {bucket_count = 25, weight = 0},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 100)
---
...
replicasets
---
- uuid4:
    weight: 0
    bucket_count: 25
    etalon_bucket_count: 0
  uuid1:
    weight: 1
    bucket_count: 25
    etalon_bucket_count: 33
  uuid3:
    weight: 1
    bucket_count: 25
    etalon_bucket_count: 33
  uuid2:
    weight: 1
    bucket_count: 25
    etalon_bucket_count: 34
...
--
-- gh-71: allow to pin buckets. A pinned bucket can not be sent
-- out of its replicaset even to satisfy perfect balance.
--
-- For this case the rebalancer does best effort balance. The
-- perfect balance here is unrechable, since on each replicaset
-- too many buckets are pinned.
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 33, pinned_count = 26, weight = 1},
	uuid2 = {bucket_count = 33, pinned_count = 24, weight = 1},
	uuid3 = {bucket_count = 34, pinned_count = 30, weight = 1},
	uuid4 = {bucket_count = 0, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 100)
---
...
replicasets
---
- uuid4:
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 20
  uuid1:
    weight: 1
    pinned_count: 26
    ignore_disbalance: true
    bucket_count: 33
    etalon_bucket_count: 26
  uuid3:
    weight: 1
    pinned_count: 30
    ignore_disbalance: true
    bucket_count: 34
    etalon_bucket_count: 30
  uuid2:
    weight: 1
    pinned_count: 24
    ignore_disbalance: true
    bucket_count: 33
    etalon_bucket_count: 24
...
calc_metrics(replicasets)
---
- 100
- uuid4
...
replicasets
---
- uuid4:
    needed: 20
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 20
  uuid1:
    weight: 1
    pinned_count: 26
    ignore_disbalance: true
    needed: -7
    bucket_count: 33
    etalon_bucket_count: 26
  uuid3:
    weight: 1
    pinned_count: 30
    ignore_disbalance: true
    needed: -4
    bucket_count: 34
    etalon_bucket_count: 30
  uuid2:
    weight: 1
    pinned_count: 24
    ignore_disbalance: true
    needed: -9
    bucket_count: 33
    etalon_bucket_count: 24
...
--
-- Here the disbalance is ok for the replicaset with uuid1 only -
-- other replicasets have pinned buckets too, but not enough to
-- break the balance: buckets are moved ok to uuid4.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 33, pinned_count = 30, weight = 1},
	uuid2 = {bucket_count = 33, pinned_count = 10, weight = 1},
	uuid3 = {bucket_count = 34, pinned_count = 15, weight = 1},
	uuid4 = {bucket_count = 0, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 100)
---
...
replicasets
---
- uuid4:
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 23
  uuid1:
    weight: 1
    pinned_count: 30
    ignore_disbalance: true
    bucket_count: 33
    etalon_bucket_count: 30
  uuid3:
    weight: 1
    bucket_count: 34
    pinned_count: 15
    etalon_bucket_count: 23
  uuid2:
    weight: 1
    bucket_count: 33
    pinned_count: 10
    etalon_bucket_count: 24
...
calc_metrics(replicasets)
---
- 100
- uuid4
...
replicasets
---
- uuid4:
    needed: 23
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 23
  uuid1:
    weight: 1
    pinned_count: 30
    ignore_disbalance: true
    needed: -3
    bucket_count: 33
    etalon_bucket_count: 30
  uuid3:
    weight: 1
    pinned_count: 15
    needed: -11
    bucket_count: 34
    etalon_bucket_count: 23
  uuid2:
    weight: 1
    pinned_count: 10
    needed: -9
    bucket_count: 33
    etalon_bucket_count: 24
...
--
-- Non-locked replicaset with any pinned bucket count can receive
-- more buckets, if the rebalancer decides it is the best balance.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 30, pinned_count = 25, weight = 0},
	uuid2 = {bucket_count = 25, pinned_count = 25, weight = 1},
	uuid3 = {bucket_count = 25, pinned_count = 25, weight = 1},
	uuid4 = {bucket_count = 20, weight = 0},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 100)
---
...
replicasets
---
- uuid4:
    weight: 0
    bucket_count: 20
    etalon_bucket_count: 0
  uuid1:
    weight: 0
    pinned_count: 25
    ignore_disbalance: true
    bucket_count: 30
    etalon_bucket_count: 25
  uuid3:
    weight: 1
    bucket_count: 25
    pinned_count: 25
    etalon_bucket_count: 37
  uuid2:
    weight: 1
    bucket_count: 25
    pinned_count: 25
    etalon_bucket_count: 38
...
calc_metrics(replicasets)
---
- inf
- uuid4
...
replicasets
---
- uuid4:
    needed: -20
    weight: 0
    bucket_count: 20
    etalon_bucket_count: 0
  uuid1:
    weight: 0
    pinned_count: 25
    ignore_disbalance: true
    needed: -5
    bucket_count: 30
    etalon_bucket_count: 25
  uuid3:
    weight: 1
    pinned_count: 25
    needed: 12
    bucket_count: 25
    etalon_bucket_count: 37
  uuid2:
    weight: 1
    pinned_count: 25
    needed: 13
    bucket_count: 25
    etalon_bucket_count: 38
...
--
-- Check that the rebalancer can calculate a complex case, when a
-- perfect balance is learned in several steps of the algorithm.
-- Here on the first step it is calculated, that each replicaset
-- must contain 25 buckets. But UUID1 can not satisfy it, so it
-- is ignored. On the next step there are 100 - 30 pinned buckets
-- from UUID1 = 70 buckets, and 3 replicasets. A new perfect
-- balance is 23-23-24. But it can not be satisfied too - UUID2
-- has 25 pinned buckets, so it is ignored. On the third step
-- there are 70 - 25 = 45 buckets and 2 replicasets. A new perfect
-- balance is 22-23. But it is unreachable too, because UUID3 has
-- 24 pinned buckets. So only UUID4 is not ignored, and it
-- receives all non-pinned buckets: 45 - 24 = 21.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 33, pinned_count = 30, weight = 1},
	uuid2 = {bucket_count = 33, pinned_count = 25, weight = 1},
	uuid3 = {bucket_count = 34, pinned_count = 24, weight = 1},
	uuid4 = {bucket_count = 0, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 100)
---
...
replicasets
---
- uuid4:
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 21
  uuid1:
    weight: 1
    pinned_count: 30
    ignore_disbalance: true
    bucket_count: 33
    etalon_bucket_count: 30
  uuid3:
    weight: 1
    pinned_count: 24
    ignore_disbalance: true
    bucket_count: 34
    etalon_bucket_count: 24
  uuid2:
    weight: 1
    pinned_count: 25
    ignore_disbalance: true
    bucket_count: 33
    etalon_bucket_count: 25
...
calc_metrics(replicasets)
---
- 100
- uuid4
...
replicasets
---
- uuid4:
    needed: 21
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 21
  uuid1:
    weight: 1
    pinned_count: 30
    ignore_disbalance: true
    needed: -3
    bucket_count: 33
    etalon_bucket_count: 30
  uuid3:
    weight: 1
    pinned_count: 24
    ignore_disbalance: true
    needed: -10
    bucket_count: 34
    etalon_bucket_count: 24
  uuid2:
    weight: 1
    pinned_count: 25
    ignore_disbalance: true
    needed: -8
    bucket_count: 33
    etalon_bucket_count: 25
...
--
-- gh-164: rebalancer_max_receiving limits receiving buckets.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 10000, weight = 1},
	uuid2 = {bucket_count = 10000, weight = 1},
	uuid3 = {bucket_count = 10000, weight = 1},
	uuid4 = {bucket_count = 0, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_etalon(replicasets, 30000)
---
...
replicasets
---
- uuid4:
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 7500
  uuid1:
    weight: 1
    bucket_count: 10000
    etalon_bucket_count: 7500
  uuid3:
    weight: 1
    bucket_count: 10000
    etalon_bucket_count: 7500
  uuid2:
    weight: 1
    bucket_count: 10000
    etalon_bucket_count: 7500
...
calc_metrics(replicasets)
---
- 100
- uuid4
...
replicasets
---
- uuid4:
    needed: 7500
    weight: 1
    bucket_count: 0
    etalon_bucket_count: 7500
  uuid1:
    needed: -2500
    weight: 1
    bucket_count: 10000
    etalon_bucket_count: 7500
  uuid3:
    needed: -2500
    weight: 1
    bucket_count: 10000
    etalon_bucket_count: 7500
  uuid2:
    needed: -2500
    weight: 1
    bucket_count: 10000
    etalon_bucket_count: 7500
...
build_routes(replicasets)
---
- uuid1:
    uuid4: 2500
  uuid3:
    uuid4: 2500
  uuid2:
    uuid4: 2500
...
--
-- gh-161: parallel rebalancer. One of the most important part of
-- the latter is a dispenser. It is a structure which hands out
-- destination UUIDs in a round-robin manner to worker fibers.
--
d = dispenser.create({uuid = 15})
---
...
dispenser.pop(d)
---
- uuid
...
for i = 1, 14 do assert(dispenser.pop(d) == 'uuid', i) end
---
...
dispenser.pop(d)
---
- null
...
dispenser.pop(d)
---
- null
...
dispenser.pop(d)
---
- null
...
dispenser.pop(d)
---
- null
...
d
---
- rlist:
    count: 0
  map:
    uuid:
      bucket_count: 0
      progress: 0
      is_throttle_warned: false
      uuid: uuid
      need_to_send: 15
...
d = dispenser.create({uuid1 = 5, uuid2 = 5})
---
...
u = dispenser.pop(d)
---
...
u, d
---
- uuid2
- rlist:
    count: 2
    last: &0
      bucket_count: 4
      prev: &1
        bucket_count: 5
        next: *0
        progress: 0
        is_throttle_warned: false
        uuid: uuid1
        need_to_send: 5
      progress: 0
      is_throttle_warned: false
      uuid: uuid2
      need_to_send: 5
    first: *1
  map:
    uuid1: *1
    uuid2: *0
...
dispenser.put(d, u)
---
...
d
---
- rlist:
    count: 2
    last: &0
      bucket_count: 5
      prev: &1
        bucket_count: 5
        next: *0
        progress: 0
        is_throttle_warned: false
        uuid: uuid1
        need_to_send: 5
      progress: 0
      is_throttle_warned: false
      uuid: uuid2
      need_to_send: 5
    first: *1
  map:
    uuid1: *1
    uuid2: *0
...
dispenser.throttle(d, u)
---
- true
...
d
---
- rlist:
    count: 2
    last: &0
      bucket_count: 5
      prev: &1
        bucket_count: 5
        next: *0
        progress: 0
        is_throttle_warned: false
        uuid: uuid1
        need_to_send: 5
      progress: 0
      is_throttle_warned: true
      uuid: uuid2
      need_to_send: 5
    first: *1
  map:
    uuid1: *1
    uuid2: *0
...
dispenser.throttle(d, u)
---
- false
...
u1 = dispenser.pop(d)
---
...
u2 = dispenser.pop(d)
---
...
u1, u2
---
- uuid1
- uuid2
...
for i = 1, 4 do					\
	assert(dispenser.pop(d) == u1)		\
	assert(dispenser.pop(d) == u2)		\
end
---
...
-- Double skip should be ok. It happens, if there were several
-- workers on one destination, and all of them received an error.
d = dispenser.create({uuid1 = 1})
---
...
dispenser.skip(d, 'uuid1')
---
...
dispenser.skip(d, 'uuid1')
---
...
_bucket:drop()
---
...
